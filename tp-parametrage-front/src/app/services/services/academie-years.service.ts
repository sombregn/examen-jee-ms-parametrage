/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AcademieYearResponse } from '../models/academie-year-response';
import { addKind } from '../fn/academie-years/add-kind';
import { AddKind$Params } from '../fn/academie-years/add-kind';
import { deleteAcademieYearById } from '../fn/academie-years/delete-academie-year-by-id';
import { DeleteAcademieYearById$Params } from '../fn/academie-years/delete-academie-year-by-id';
import { getAcademieYearById } from '../fn/academie-years/get-academie-year-by-id';
import { GetAcademieYearById$Params } from '../fn/academie-years/get-academie-year-by-id';
import { getAllAcademieYears } from '../fn/academie-years/get-all-academie-years';
import { GetAllAcademieYears$Params } from '../fn/academie-years/get-all-academie-years';
import { updateAcademieYear } from '../fn/academie-years/update-academie-year';
import { UpdateAcademieYear$Params } from '../fn/academie-years/update-academie-year';

@Injectable({ providedIn: 'root' })
export class AcademieYearsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllAcademieYears()` */
  static readonly GetAllAcademieYearsPath = '/academieYears';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAcademieYears()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAcademieYears$Response(params?: GetAllAcademieYears$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AcademieYearResponse>>> {
    return getAllAcademieYears(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAcademieYears$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAcademieYears(params?: GetAllAcademieYears$Params, context?: HttpContext): Observable<Array<AcademieYearResponse>> {
    return this.getAllAcademieYears$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AcademieYearResponse>>): Array<AcademieYearResponse> => r.body)
    );
  }

  /** Path part for operation `updateAcademieYear()` */
  static readonly UpdateAcademieYearPath = '/academieYears';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAcademieYear()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAcademieYear$Response(params: UpdateAcademieYear$Params, context?: HttpContext): Observable<StrictHttpResponse<AcademieYearResponse>> {
    return updateAcademieYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAcademieYear$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAcademieYear(params: UpdateAcademieYear$Params, context?: HttpContext): Observable<AcademieYearResponse> {
    return this.updateAcademieYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<AcademieYearResponse>): AcademieYearResponse => r.body)
    );
  }

  /** Path part for operation `addKind()` */
  static readonly AddKindPath = '/academieYears';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addKind()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addKind$Response(params: AddKind$Params, context?: HttpContext): Observable<StrictHttpResponse<AcademieYearResponse>> {
    return addKind(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addKind$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addKind(params: AddKind$Params, context?: HttpContext): Observable<AcademieYearResponse> {
    return this.addKind$Response(params, context).pipe(
      map((r: StrictHttpResponse<AcademieYearResponse>): AcademieYearResponse => r.body)
    );
  }

  /** Path part for operation `getAcademieYearById()` */
  static readonly GetAcademieYearByIdPath = '/academieYears/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAcademieYearById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAcademieYearById$Response(params: GetAcademieYearById$Params, context?: HttpContext): Observable<StrictHttpResponse<AcademieYearResponse>> {
    return getAcademieYearById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAcademieYearById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAcademieYearById(params: GetAcademieYearById$Params, context?: HttpContext): Observable<AcademieYearResponse> {
    return this.getAcademieYearById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AcademieYearResponse>): AcademieYearResponse => r.body)
    );
  }

  /** Path part for operation `deleteAcademieYearById()` */
  static readonly DeleteAcademieYearByIdPath = '/academieYears/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAcademieYearById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAcademieYearById$Response(params: DeleteAcademieYearById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAcademieYearById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAcademieYearById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAcademieYearById(params: DeleteAcademieYearById$Params, context?: HttpContext): Observable<void> {
    return this.deleteAcademieYearById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
