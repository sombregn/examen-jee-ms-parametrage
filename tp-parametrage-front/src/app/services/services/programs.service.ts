/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProgram } from '../fn/programs/add-program';
import { AddProgram$Params } from '../fn/programs/add-program';
import { deleteProgramById } from '../fn/programs/delete-program-by-id';
import { DeleteProgramById$Params } from '../fn/programs/delete-program-by-id';
import { getAllPrograms } from '../fn/programs/get-all-programs';
import { GetAllPrograms$Params } from '../fn/programs/get-all-programs';
import { getProgramById } from '../fn/programs/get-program-by-id';
import { GetProgramById$Params } from '../fn/programs/get-program-by-id';
import { ProgramResponse } from '../models/program-response';
import { updateProgram } from '../fn/programs/update-program';
import { UpdateProgram$Params } from '../fn/programs/update-program';

@Injectable({ providedIn: 'root' })
export class ProgramsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllPrograms()` */
  static readonly GetAllProgramsPath = '/programs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPrograms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPrograms$Response(params?: GetAllPrograms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProgramResponse>>> {
    return getAllPrograms(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPrograms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPrograms(params?: GetAllPrograms$Params, context?: HttpContext): Observable<Array<ProgramResponse>> {
    return this.getAllPrograms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProgramResponse>>): Array<ProgramResponse> => r.body)
    );
  }

  /** Path part for operation `updateProgram()` */
  static readonly UpdateProgramPath = '/programs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProgram()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProgram$Response(params: UpdateProgram$Params, context?: HttpContext): Observable<StrictHttpResponse<ProgramResponse>> {
    return updateProgram(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProgram$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProgram(params: UpdateProgram$Params, context?: HttpContext): Observable<ProgramResponse> {
    return this.updateProgram$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProgramResponse>): ProgramResponse => r.body)
    );
  }

  /** Path part for operation `addProgram()` */
  static readonly AddProgramPath = '/programs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProgram()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProgram$Response(params: AddProgram$Params, context?: HttpContext): Observable<StrictHttpResponse<ProgramResponse>> {
    return addProgram(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProgram$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProgram(params: AddProgram$Params, context?: HttpContext): Observable<ProgramResponse> {
    return this.addProgram$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProgramResponse>): ProgramResponse => r.body)
    );
  }

  /** Path part for operation `getProgramById()` */
  static readonly GetProgramByIdPath = '/programs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProgramById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProgramById$Response(params: GetProgramById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProgramResponse>> {
    return getProgramById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProgramById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProgramById(params: GetProgramById$Params, context?: HttpContext): Observable<ProgramResponse> {
    return this.getProgramById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProgramResponse>): ProgramResponse => r.body)
    );
  }

  /** Path part for operation `deleteProgramById()` */
  static readonly DeleteProgramByIdPath = '/programs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProgramById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProgramById$Response(params: DeleteProgramById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteProgramById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProgramById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProgramById(params: DeleteProgramById$Params, context?: HttpContext): Observable<void> {
    return this.deleteProgramById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
