/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addClasse } from '../fn/classes/add-classe';
import { AddClasse$Params } from '../fn/classes/add-classe';
import { assignSubjectToClasse } from '../fn/classes/assign-subject-to-classe';
import { AssignSubjectToClasse$Params } from '../fn/classes/assign-subject-to-classe';
import { ClasseResponse } from '../models/classe-response';
import { deleteClasseById } from '../fn/classes/delete-classe-by-id';
import { DeleteClasseById$Params } from '../fn/classes/delete-classe-by-id';
import { getAllClasses } from '../fn/classes/get-all-classes';
import { GetAllClasses$Params } from '../fn/classes/get-all-classes';
import { getClasseById } from '../fn/classes/get-classe-by-id';
import { GetClasseById$Params } from '../fn/classes/get-classe-by-id';
import { updateClasse } from '../fn/classes/update-classe';
import { UpdateClasse$Params } from '../fn/classes/update-classe';

@Injectable({ providedIn: 'root' })
export class ClassesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllClasses()` */
  static readonly GetAllClassesPath = '/classes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClasses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClasses$Response(params?: GetAllClasses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ClasseResponse>>> {
    return getAllClasses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClasses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClasses(params?: GetAllClasses$Params, context?: HttpContext): Observable<Array<ClasseResponse>> {
    return this.getAllClasses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ClasseResponse>>): Array<ClasseResponse> => r.body)
    );
  }

  /** Path part for operation `updateClasse()` */
  static readonly UpdateClassePath = '/classes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateClasse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateClasse$Response(params: UpdateClasse$Params, context?: HttpContext): Observable<StrictHttpResponse<ClasseResponse>> {
    return updateClasse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateClasse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateClasse(params: UpdateClasse$Params, context?: HttpContext): Observable<ClasseResponse> {
    return this.updateClasse$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClasseResponse>): ClasseResponse => r.body)
    );
  }

  /** Path part for operation `addClasse()` */
  static readonly AddClassePath = '/classes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addClasse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addClasse$Response(params: AddClasse$Params, context?: HttpContext): Observable<StrictHttpResponse<ClasseResponse>> {
    return addClasse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addClasse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addClasse(params: AddClasse$Params, context?: HttpContext): Observable<ClasseResponse> {
    return this.addClasse$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClasseResponse>): ClasseResponse => r.body)
    );
  }

  /** Path part for operation `assignSubjectToClasse()` */
  static readonly AssignSubjectToClassePath = '/classes/{classeId}/assign-subject/{subjectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignSubjectToClasse()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignSubjectToClasse$Response(params: AssignSubjectToClasse$Params, context?: HttpContext): Observable<StrictHttpResponse<ClasseResponse>> {
    return assignSubjectToClasse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignSubjectToClasse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignSubjectToClasse(params: AssignSubjectToClasse$Params, context?: HttpContext): Observable<ClasseResponse> {
    return this.assignSubjectToClasse$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClasseResponse>): ClasseResponse => r.body)
    );
  }

  /** Path part for operation `getClasseById()` */
  static readonly GetClasseByIdPath = '/classes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getClasseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getClasseById$Response(params: GetClasseById$Params, context?: HttpContext): Observable<StrictHttpResponse<ClasseResponse>> {
    return getClasseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getClasseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getClasseById(params: GetClasseById$Params, context?: HttpContext): Observable<ClasseResponse> {
    return this.getClasseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClasseResponse>): ClasseResponse => r.body)
    );
  }

  /** Path part for operation `deleteClasseById()` */
  static readonly DeleteClasseByIdPath = '/classes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteClasseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteClasseById$Response(params: DeleteClasseById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteClasseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteClasseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteClasseById(params: DeleteClasseById$Params, context?: HttpContext): Observable<void> {
    return this.deleteClasseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
